= ModelFilter

ModelFilter provides some methods for model filtering, even fields dependent on
other models

== Installation

Add this line to your application's Gemfile:

    gem 'model_filter', :git => 'git://github.com/mist79/model_filter.git'

And then execute:

    $ bundle

== Config

Place an instruction into your model:
  acts_as_filterable
This by default allows to filter all model's columns and provide default set of
comparison symbols to use in views for comboboxes (<=, =, >=, !=)

If you need to change settings, provide some config like this:
  acts_as_filterable do |conf|
    conf.allowed_filters     = [:id, :name, :some_custom_filter]  # default: :all (all columns + filter_mappings)
    conf.filters_placement   = :the_filters         # default: :filters - where filters placed in request params
                                                    # (for controllers/views)
    conf.ignore_blank_values = true                 # defalut: false (can be overrided at Model.filtered call)
    conf.comparison_symbols  = {                    # default: :default (=, <, >, <=, >=, !=)
      '='       => :eq,
      'greater' => :gt,
    }
    conf.advanced_fields = [:price]                # fields for which will be applied special filter
                                                   # (only numeric and positive) like this: '1, 3-7, 12'
                                                   # with comparison symbols :eq, :not_eq, :in, :not_in
    filter_mappings = {
      :id                 => :remapped_id_filter,  # if you want special id filter behavior
      :some_custom_filter => :some_custom_method   # e.g. for properties depended
                                                   # on other models, joins, etc
    }
  end
and place in model the methods for processing properties that you want to handle special
(which you provided in filter_mappings):
  def remapped_id_filter(wanted_value, comparison_symbol = :eq)
    where(:id => wanted_value)
  end
or with Arel (for use a comparison symbols or other conditions):
  def remapped_id_filter(wanted_value, comparison_symbol = :eq)
    where(arel_table[:id].send(wanted_value, comparison_symbol))
  end
and for properties associated with other model:
  def some_custom_method(wanted_value, comparison_symbol = :eq)
    joins(:some_other_model).
      where(:some_other_model => {:the_field => wanted_value})
  end
or with Arel (for use a comparison symbols, outer joins, etc).

Your remapping methods must have two parameters in signature (for value and for comparison
symbol - this used by <tt>*filtered*</tt>); parameter for comparison symbol can have
a default value.

All possible predications (:eq, :gt, :lt, etc) can see in Arel::Predications.instance_methods

== Usage

For filter model with params hash, call <tt>*filtered*</tt> method:
  MyModel.filtered(:id => 3, :name => 'unnecessary', :name_compar => :not_eq)

If you want to filter one field, you can use method <tt>*with_value_of*</tt>
  MyModel.with_value_of(:name, 'the_name')
  MyModel.with_value_of(:name, 'not_name', :not_eq)

These methods autoatically picks up methods for columns mapped by <tt>*filter_mappings*</tt>
(for <tt>*filtered*</tt> method - only if they listed in <tt>*allowed_filters*</tt>)

If you want that <tt>*filtered*</tt> method to ignore blank filter values, place into
the config section:
  config.ignore_blank_values = true
This has a result:
  MyModel.filtered(:id => nil).to_sql # => SELECT my_models.* FROM my_models
Otherwise (if ignore_blank_values = false)
  MyModel.filtered(:id => nil).to_sql # => SELECT my_models.* FROM my_models WHERE id IS NULL
That setting can be overrided by including <tt><b>:ignore_blank_values => true <i>(or false)</i></b></tt>
into arguments hash:
  MyModel.filtered(:name => nil, :ignore_blank_values => false)

If you want to filter some fields with arrays, ranges, etc then place into the config section
something like this:
  config.advanced_fields = [:price, :quantity]
Then, you can call:
  MyModel.filtered(price: '1-99, 103, 209').to_sql
    #=> SELECT my_models.* FROM my_models
    #   WHERE ((my_models.price BETWEEN 1.0 AND 99.0 OR my_models.price IN (103.0, 209.0)))
  MyModel.filtered(price: '1-99, 103, 209', price_compar: :not_eq).to_sql  # or :not_in
    #=> SELECT my_models.* FROM my_models.price
    #   WHERE (my_models.price < 1.0 OR my_models.price > 99.0 AND my_models.price NOT IN (103.0, 209.0))
  MyModel.filtered(price: '3').to_sql
    #=> SELECT my_models.* FROM my_models  WHERE my_models.price = 3.0

All conditions passed to <tt>*filtered*</tt> method will be combined with 'AND' condition.

In views, you can use helper <tt><b>compar_symbols_select_for(field)</b></tt> to make dropdown combo-box
that will be used for filtering with comparison symbols, such as '<=', '!=', etc; it will have the
name like <tt>filters[my_column_compar]</tt>.

== Contributing

1. Fork it
2. Create your feature branch (`git checkout -b my-new-feature`)
3. Commit your changes (`git commit -am 'Add some feature'`)
4. Push to the branch (`git push origin my-new-feature`)
5. Create new Pull Request
